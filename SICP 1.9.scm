;Exercise 1.9: Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

(define (add a b)
  (if (= a 0) 
    b 
    (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0) 
    b 
    (+ (dec a) (inc b))))

;Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

;*****************                                 	
;First REPL 

1 ]=> 

(define (inc a)
  
  (+ a 1))

(define (dec a)
  (- a 1))
            

;Value: inc

1 ]=> 
;Value: dec

1 ]=> 

(define (+ a b)
  (if (= a 0) 
    b 
    (inc (+ (dec a) b))))

;Value: +

1 ]=> 

(+ 4 5)

; ∞

1 ]=> 

(define (+ a b)
  (if (= a 0) 
    b 
    (+ (dec a) (inc b))))


;Value: +

1 ]=> 

(+ 4 5)
;Aborting!: maximum recursion depth exceeded

;*************

;What happened here? 

;The first three lines of both procedures are the same, and ensure that if the first value is 0, the second value is returned. This is efficient and makes sure things happen quickly. 

(define (+ a b)
  (if = a 0)
  b
  
  ;First Procedure's last line is where things get strange. 
  
  (inc (+ (dec a) b)))

;This expands to
(+ (+ (- a 1) b) 1)

;Using the substitution model, the procedure will evolve as follows if the following values are input. 

(+ 4 5)

(+ (+ (- 4 1) 5) 1)
(+ (+ 3 5) 1)
(+ (8) 1)
;Value 9

;Yet this is not what is returned... instead i get ∞
;What am I missing here? 

;ITS A RECURSIVE DEFINITION!!! 
;OOOHHHHHH

(+ 4 5)

(+ (+ (- 4 1) 5) 1)
(+ (+ 3 5) 1)
(+ (+ (+ (- 3 1) 5) 1) 1)
(+ (+ (+ 2 5) 1) 1)
(+ (+ (+ (+ (- 2 1) 5) 1) 1) 1) 
(+ (+ (+ (+ 1 5) 1) 1) 1) 
(+ (+ (+ (+ (+ (- 1 1) 5) 1) 1) 1) 1)
(+ (+ (+ (+ (+ 0 5) 1) 1) 1) 1)
(+ (+ (+ (+ 5 1) 1) 1) 1)
(+ (+ (+ (+ (+ (- 5 1) 1) 1) 1) 1) 1)
(+ (+ (+ (+ (+ 4 1) 1) 1) 1) 1)
(+ (+ (+ (+ (+ (+ 4 1) 1) 1) 1) 1) 1)
   
;Is this right? How does the + expand?
;The call to inc calls another + which adds another layer of addition to the call. 
;Wow this adds onto it self quickly. 
;Lets build this one out. 
   
(+ 4 5)

;a != 0 so it returns the alternative

(inc (+ (dec 4) 5))
;with dec expanded
(inc (+ (- 4 1) 5))
;with inc expanded
(+ (+ (- 4 1) 5) 1)
;(- 4 1) solved
(+ (+ 3 5) 1)
;(+ 3 5) expanded
(+ (inc (+ (dec 3) 5)) 1)
;with dec expanded
(+ (inc (+ (- 3 1) 5)) 1)
;with inc expanded
(+ (+ (+ (- 3 1) 5) 1) 1)
;(- 3 1)solved
(+ (+ (+ 2 5) 1) 1)
;(+ 2 5) expanded
(+ (+ (inc (+ (dec 2) 5)) 1) 1)
;dec expanded
(+ (+ (inc (+ (- 2 1) 5)) 1) 1)
;inc expanded
(+ (+ (+ (+ (- 2 1) 5) 1) 1) 1)
;(- 2 1) solved
(+ (+ (+ (+ 1 5) 1) 1) 1)
;(+ 1 5) expanded
(+ (+ (+ (inc (+ (dec 1) 5)) 1) 1) 1)
;dec expanded
(+ (+ (+ (inc (+ (- 1 1) 5)) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (- 1 1) 5) 1) 1) 1) 1)
;(- 1 1) solved
(+ (+ (+ (+ (+ 0 5) 1) 1) 1) 1)
;b!!!
(+ (+ (+ (+ 5 1) 1) 1) 1)
;(+ 5 1)expanded
(+ (+ (+ (inc (+ (dec 5) 1)) 1) 1) 1)
;dec expanded
(+ (+ (+ (inc (+ (- 5 1) 1)) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (- 5 1) 1) 1) 1) 1) 1)
;(- 5 1) solved
(+ (+ (+ (+ (+ 4 1) 1) 1) 1) 1)
;(+ 4 1) expanded
(+ (+ (+ (+ (inc (+ (dec 4) 1)) 1) 1) 1) 1)
;dec expanded
(+ (+ (+ (+ (inc (+ (- 4 1) 1)) 1) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (+ (- 4 1) 1) 1) 1) 1) 1) 1)
;(- 4 1) solved
(+ (+ (+ (+ (+ (+ 3 1) 1) 1) 1) 1) 1)
;(+ 3 1) expanded
(+ (+ (+ (+ (+ (inc (+ (dec 3) 1)) 1) 1) 1) 1) 1)
;dec expanded
(+ (+ (+ (+ (+ (inc (+ (- 3 1) 1)) 1) 1) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (+ (+ (- 3 1) 1) 1) 1) 1) 1) 1) 1)
;(- 3 1) solved
(+ (+ (+ (+ (+ (+ (+ 2 1) 1) 1) 1) 1) 1) 1)
;+ 2 1 expanded
(+ (+ (+ (+ (+ (+ (inc (+ (dec 2) 1)) 1) 1) 1) 1) 1) 1)
;dec expanded
(+ (+ (+ (+ (+ (+ (inc (+ (- 2 1) 1)) 1) 1) 1) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (+ (+ (+ (- 2 1) 1) 1) 1) 1) 1) 1) 1) 1)
;(- 2 1) solved
(+ (+ (+ (+ (+ (+ (+ (+ 1 1) 1) 1) 1) 1) 1) 1) 1)
;(+ 1 1) expanded
(+ (+ (+ (+ (+ (+ (+ (inc (+ (dec 1) 1)) 1) 1) 1) 1) 1) 1) 1)
;dec expanded
(+ (+ (+ (+ (+ (+ (+ (inc (+ (- 1 1) 1)) 1) 1) 1) 1) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (+ (+ (+ (+ (- 1 1) 1) 1) 1) 1) 1) 1) 1) 1) 1)
;(- 1 1) solved
(+ (+ (+ (+ (+ (+ (+ (+ (+ 0 1) 1) 1) 1) 1) 1) 1) 1) 1)
;b!!!
(+ (+ (+ (+ (+ (+ (+ (+ 1 1) 1) 1) 1) 1) 1) 1) 1)
;(+ 1 1) expanded
(+ (+ (+ (+ (+ (+ (+ (inc (+ (dec 1 ) 1) ) 1) 1) 1) 1) 1) 1) 1)
;dec expanded
(+ (+ (+ (+ (+ (+ (+ (inc (+ (- 1 1) 1) ) 1) 1) 1) 1) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (+ (+ (+ 1 (+ (- 1 1) 1) 1) 1) 1) 1) 1) 1) 1) 1)
;(- 1 1) solved
(+ (+ (+ (+ (+ (+ (+ (+ 1 (+ 0 1) 1) 1) 1) 1) 1) 1) 1) 1)
;b
(+ (+ (+ (+ (+ (+ (+ (+ (+ 1 1) 1) 1) 1) 1) 1) 1) 1) 1)
;(+ 1 1) expanded
(+ (+ (+ (+ (+ (+ (+ (+ (inc (+ (dec 1 ) 1) ) 1) 1) 1) 1) 1) 1) 1) 1)
;dec expanded
(+ (+ (+ (+ (+ (+ (+ (+ (inc (+ (- 1 1) 1) ) 1) 1) 1) 1) 1) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (- 1 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1)
;;(- 1 1) solved
(+ (+ (+ (+ (+ (+ (+ (+ (+ (+ 0 1) 1) 1) 1) 1) 1) 1) 1) 1) 1)
;b
(+ (+ (+ (+ (+ (+ (+ (+ (+ 1 1) 1) 1) 1) 1) 1) 1) 1) 1)
;(+ 1 1) expanded
(+ (+ (+ (+ (+ (+ (+ (+ (inc (+ (dec 1 ) 1) ) 1) 1) 1) 1) 1) 1) 1) 1)
;dec expanded
(+ (+ (+ (+ (+ (+ (+ (+ (inc (+ (- 1 1) 1) ) 1) 1) 1) 1) 1) 1) 1) 1)
;inc expanded
(+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (- 1 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1)
;;(- 1 1) solved
(+ (+ (+ (+ (+ (+ (+ (+ (+ (+ 0 1) 1) 1) 1) 1) 1) 1) 1) 1) 1)
;b
(+ (+ (+ (+ (+ (+ (+ (+ (+ 1 1) 1) 1) 1) 1) 1) 1) 1) 1)
;compare to line 211
(+ (+ (+ (+ (+ (+ (+ (+ (+ 1 1) 1) 1) 1) 1) 1) 1) 1) 1)
;This is why it went into an infinte loop. the + definition caused it to never reduce after expanding. 

;QUESTION: this is strange, none of the solutions i find online seem to come across this issue. Is there something wrong with my repl?

;ANSWER: Nope, my results are corraborated on http://www.replit.info/languages/scheme

;The interesting part is that if i change the operator from '+' to 'add' it works perfectly. 
 
;check out the repl output. 
********
1 ]=> 
(define (inc a)
  (+ a 1))

(define (dec a)
  (- a 1))

;Value: inc

1 ]=> 
;Value: dec

1 ]=> 

(define (add a b)
  (if (= a 0) 
    b 
    (inc (+ (dec a) b))))

;Value: add

1 ]=> (add 4 5)

;Value: 9
*****************



;I know what happened. the example was supposed to be worked out by hand, not run through a repl. Look at the question.  "Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5)"
;also it should be noted that in the lectures Sussman states "in general I'm not going to write down intermediate steps when doing substitutions having to do with ifs because they expand and become too complicated"  

;I bet my definition of inc is the root of the issue here. If that were built differently it wouldnt ∞. 


;So where do I go from here? 

;line 80 led me down this path, and I relize now that i failed to properly impliment the order of operations as explained in lecture 1b:

;Evaluate the operator to get procedure
;Evaluate the operands to get arguments
;Apply the procedure to the arguments
;Copy the body of the procedure substituting the arguments supplied for the formal parameters of the procedure.
;Evaluate the resulting new body.

;If I follow these without fully expanding inc and dec, but instead moving to the next step knowing what they produce, ie treating them as primitives, I get the following: 

(+ 4 5)
    (inc (+ (dec 4) 5))
    (inc (+ 3 5))
    (inc (inc (+ (dec 3) 5)))
    (inc (inc (+ 2 5)))
    (inc (inc (inc (+ (dec 2) 5))))
    (inc (inc (inc (+ 1 5))))
    (inc (inc (inc (inc (+ (dec 1) 5)))))
    (inc (inc (inc (inc (+ 0 5)))))
    (inc (inc (inc (inc 5))))
    (inc (inc (inc 6)))
    (inc (inc 7))
    (inc 8)
    9

;PROCEDURE 2










                                                                                                                                                            